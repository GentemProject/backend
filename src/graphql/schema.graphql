type Query {
  # Users
  getUsers(query: String, page: Float, limit: Float, orderBy: String, orderSort: String): [User]
  getUser(userId: String!): User
  getMe: User

  # Causes
  getCauses(causesIds: [String]): [Cause]
}

type Mutation {
  # Authentication
  signNewAccessToken(refreshToken: String!): String
  signIn(email: String!, password: String!): Auth
  signUp(name: String!, email: String!, password: String!): Auth

  # Users
  createUser(name: String!, email: String!, password: String!, isAdmin: String!): User
  deleteUser(userId: String!): Boolean

  # Causes
  createCause(name: String!): Cause
  deleteCause(causeId: String!): Boolean
}

type Auth {
  accessToken: String
  refreshToken: String
  user: User
}

type User {
  id: ID
  name: String
  email: String
  isAdmin: Boolean
  lastLoginAt: String
  createdAt: String
  updatedAt: String
}

type Cause {
  causeId: ID
  name: String
  createdAt: String
  updatedAt: String
}

